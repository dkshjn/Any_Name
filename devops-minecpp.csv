Before Bug fix,After Bug fix,Location,Bug type,Commit Message,Project URL,File Path,Fixed Commit,Buggy Commit,Test File,Coding Effort,Constructs,Lizard Features Buggy,Lizard Features Fixed,BLEU,crystalBLEU_score,BERT_score,LLM_Label
"2 WIP
3 
4 Yes, we do write tests for our tests.
5 """"""
6 import unittest
7 import pathlib
8 
9 from tests import *
10 from scripts import get_answered_questions
11 
","2 WIP
3 
4 Yes, we do write tests for our tests.
5 """"""
6 import unittest
7 # import pathlib
8 
9 # from tests import *
10 # from scripts import get_answered_questions
11 
","Before: 7
After: 7",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,15,"{'module': 1, 'expression_statement': 2, 'identifier': 13, ',': 1, 'ERROR': 2, 'for': 1, '.': 1, 'string_start': 1, 'import_statement': 2, 'import': 4, 'dotted_name': 5, 'import_from_statement': 2, 'from': 2, 'wildcard_import': 1, '*': 1}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7913476753403808,0.8073425786941183,"(tensor([0.9876]), tensor([0.9882]), tensor([0.9879]), tensor([0.9881]))",
"4 Yes, we do write tests for our tests.
5 """"""
6 import unittest
7 import pathlib
8 
9 from tests import *
10 from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
","4 Yes, we do write tests for our tests.
5 """"""
6 import unittest
7 # import pathlib
8 
9 # from tests import *
10 # from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
","Before: 9, 10
After: 9, 10",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,22,"{'module': 1, 'expression_statement': 1, 'identifier': 12, ',': 1, 'ERROR': 2, 'for': 1, '.': 1, 'string_start': 1, 'import_statement': 2, 'import': 4, 'dotted_name': 5, 'import_from_statement': 2, 'from': 2, 'wildcard_import': 1, '*': 1}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.8255964765419495,0.8396343060987558,"(tensor([0.9851]), tensor([0.9858]), tensor([0.9854]), tensor([0.9858]))",
"10 from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
14     p = pathlib.Path(rf'D:\PycharmProjects\devops-interview-questions\scripts\tests\testcase{n}.md')
15 
16     with open(p, 'rb') as f:
17         file_list = [line.rstrip() for line in f.readlines()]
18     return file_list
19 
20 
","10 # from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
14     pass
15     # p = pathlib.Path(
16     #    rf'D:\PycharmProjects\devops-interview-questions\scripts\tests\' + '
17     # testcase{n}.md')
18 
19     # with open(p, 'rb') as f:
20     #    file_list = [line.rstrip() for line in f.readlines()]
21     # return file_list
22 
23 
","Before: 14
After: 14, 15, 16, 17",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,63,"{'module': 1, 'import_from_statement': 1, 'from': 1, 'dotted_name': 2, 'identifier': 19, 'import': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 5, 'typed_parameter': 1, ':': 3, 'type': 1, ')': 5, 'block': 2, 'expression_statement': 2, 'assignment': 2, '=': 2, 'call': 4, 'attribute': 3, '.': 3, 'argument_list': 4, 'string': 2, 'string_start': 2, 'string_content': 3, 'interpolation': 1, '{': 1, '}': 1, 'string_end': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, ',': 1, 'as': 1, 'as_pattern_target': 1, 'list_comprehension': 1, '[': 1, 'for_in_clause': 1, 'for': 1, 'in': 1, ']': 1, 'return_statement': 1, 'return': 1}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5943005895784118,0.6009124113945333,"(tensor([0.9522]), tensor([0.9706]), tensor([0.9613]), tensor([0.9687]))",DEV
"10 from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
14     p = pathlib.Path(rf'D:\PycharmProjects\devops-interview-questions\scripts\tests\testcase{n}.md')
15 
16     with open(p, 'rb') as f:
17         file_list = [line.rstrip() for line in f.readlines()]
18     return file_list
19 
20 
","10 # from scripts import get_answered_questions
11 
12 
13 def open_test_case_file(n: int):
14     pass
15     # p = pathlib.Path(
16     #    rf'D:\PycharmProjects\devops-interview-questions\scripts\tests\' + '
17     # testcase{n}.md')
18 
19     # with open(p, 'rb') as f:
20     #    file_list = [line.rstrip() for line in f.readlines()]
21     # return file_list
22 
23 
","Before: 16, 17, 18
After: 19, 20, 21",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,84,"{'module': 1, 'import_from_statement': 1, 'from': 1, 'dotted_name': 2, 'identifier': 19, 'import': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 5, 'typed_parameter': 1, ':': 3, 'type': 1, ')': 5, 'block': 2, 'expression_statement': 2, 'assignment': 2, '=': 2, 'call': 4, 'attribute': 3, '.': 3, 'argument_list': 4, 'string': 2, 'string_start': 2, 'string_content': 3, 'interpolation': 1, '{': 1, '}': 1, 'string_end': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, ',': 1, 'as': 1, 'as_pattern_target': 1, 'list_comprehension': 1, '[': 1, 'for_in_clause': 1, 'for': 1, 'in': 1, ']': 1, 'return_statement': 1, 'return': 1}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5943005895784118,0.6009124113945333,"(tensor([0.9522]), tensor([0.9706]), tensor([0.9613]), tensor([0.9687]))",
"23 
24     )
25 
26     def test_count_case_1(self):
27         raw_list = open_test_case_file(1)
28         question_list = get_question_list(raw_list)
29         answers = get_answered_questions.n_answers(question_list)
30 
31         self.assertEqual(len(question_list), 21)
32         self.assertEqual(answers, 2)
33 
34     def test_count_case_2(self):
","26 
27     )
28 
29     def test_count_case_1(self):
30         pass
31         # raw_list = open_test_case_file(1)
32         # question_list = get_question_list(raw_list)
33         # answers = get_answered_questions.n_answers(question_list)
34 
35         # self.assertEqual(len(question_list), 21)
36         # self.assertEqual(answers, 2)
37 
38     def test_count_case_2(self):
","Before: 27, 28, 29
After: 30, 31, 32, 33",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,152,"{'module': 1, 'ERROR': 1, ')': 8, 'function_definition': 1, 'def': 1, 'identifier': 18, 'parameters': 1, '(': 7, ':': 1, 'block': 1, 'expression_statement': 5, 'assignment': 3, '=': 3, 'call': 6, 'argument_list': 6, 'integer': 3, 'attribute': 3, '.': 3, ',': 2}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5668569530462911,0.56153376307089,"(tensor([0.9583]), tensor([0.9666]), tensor([0.9624]), tensor([0.9658]))",
"23 
24     )
25 
26     def test_count_case_1(self):
27         raw_list = open_test_case_file(1)
28         question_list = get_question_list(raw_list)
29         answers = get_answered_questions.n_answers(question_list)
30 
31         self.assertEqual(len(question_list), 21)
32         self.assertEqual(answers, 2)
33 
34     def test_count_case_2(self):
","26 
27     )
28 
29     def test_count_case_1(self):
30         pass
31         # raw_list = open_test_case_file(1)
32         # question_list = get_question_list(raw_list)
33         # answers = get_answered_questions.n_answers(question_list)
34 
35         # self.assertEqual(len(question_list), 21)
36         # self.assertEqual(answers, 2)
37 
38     def test_count_case_2(self):
","Before: 31, 32
After: 35, 36",fix syntax checker tests,PEP8 fixes,https://github.com/bregman-arie/devops-exercises,tests/syntax_checker_unittest.py,73665e6d52d7ec0e1e662bd0801857907783810f,68e278fe15b3d08b056c4900ffdd17a0851ad267,0,192,"{'module': 1, 'ERROR': 1, ')': 8, 'function_definition': 1, 'def': 1, 'identifier': 18, 'parameters': 1, '(': 7, ':': 1, 'block': 1, 'expression_statement': 5, 'assignment': 3, '=': 3, 'call': 6, 'argument_list': 6, 'integer': 3, 'attribute': 3, '.': 3, ',': 2}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 45, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 18, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 1, 'nloc': 2, 'token_count': 8, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 13, 'end_line': 14, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_checker_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5668569530462911,0.56153376307089,"(tensor([0.9583]), tensor([0.9666]), tensor([0.9624]), tensor([0.9658]))",DEV
"72     if with_answer:
73         return choice(get_answered_questions(question_list))
74     return choice(question_list)
75 
76 
77 """"""Use this question_list. Unless you have already opened/worked/need the file, then don't or 
78 you will end up doing the same thing twice.
79 
80 eg: 
81 
","72     if with_answer:
73         return choice(get_answered_questions(question_list))
74     return choice(question_list)
75 
76 
77 """"""Use this question_list. Unless you have already opened/worked/need the file, then don't or
78 you will end up doing the same thing twice.
79 
80 eg:
81 
","Before: 77
After: 77",fix typo in question_utils.py,fix trailing space,https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,d4cd1e2dd228b04c568fc68ea00fd108321136ee,abbb951589ecd3addbc2c505bb7fb8f773b17274,0,544,"{'module': 1, 'if_statement': 1, 'if': 1, 'identifier': 31, ':': 2, 'block': 1, 'return_statement': 2, 'return': 2, 'call': 3, 'argument_list': 3, '(': 3, ')': 3, 'ERROR': 4, 'string_start': 2, 'attribute': 2, '.': 2, 'expression_statement': 1, 'binary_operator': 2, '/': 2, ',': 1, 'boolean_operator': 1, 'or': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",1.0,1.0,"(tensor([0.9986]), tensor([0.9986]), tensor([0.9986]), tensor([0.9986]))",DEV
"75 
76 
77 """"""Use this question_list. Unless you have already opened/worked/need the file, then don't or 
78 you will end up doing the same thing twice.
79 
80 eg: 
81 
82 #my_dir/main.py
83 
84 from scripts import question_utils
","75 
76 
77 """"""Use this question_list. Unless you have already opened/worked/need the file, then don't or
78 you will end up doing the same thing twice.
79 
80 eg:
81 
82 #my_dir/main.py
83 
84 from scripts import question_utils
","Before: 80
After: 80",fix typo in question_utils.py,fix trailing space,https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,d4cd1e2dd228b04c568fc68ea00fd108321136ee,abbb951589ecd3addbc2c505bb7fb8f773b17274,0,560,"{'module': 1, 'ERROR': 4, 'string_start': 2, 'identifier': 25, 'attribute': 2, '.': 2, 'expression_statement': 1, 'binary_operator': 2, '/': 2, ',': 1, 'boolean_operator': 1, 'or': 1, ':': 1, 'comment': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",1.0,1.0,"(tensor([0.9976]), tensor([0.9976]), tensor([0.9976]), tensor([0.9976]))",
"14 
15 class QuestionCount(unittest.TestCase):
16 
17     def test_case_1(self):
18         raw_list = open_test_case_file(1)
19         question_list = get_question_list(raw_list)
20         answers = get_answered_questions(question_list)
21 
22         self.assertEqual(len(question_list), 11)
23         self.assertEqual(answers, 3)
24 
25     def test_case_2(self):
","14 
15 class QuestionCount(unittest.TestCase):
16 
17     def test_case_1(self):
18         raw_list = open_test_case_file(1)
19         question_list = get_question_list(raw_list)
20         answers = get_answered_questions(question_list)
21 
22         self.assertEqual(len(question_list), 11)
23         self.assertEqual(len(answers), 3)
24 
25     def test_case_2(self):
","Before: 23
After: 23",fix typo in tests/scripts_question_utils_unittest.py,Fix unittest,https://github.com/bregman-arie/devops-exercises,tests/scripts_question_utils_unittest.py,a64decee570c4927f77acc2c2bcd45f7310970f7,cc848b135db53031a9250f3d56a4fd6bf5a3189a,0,217,"{'module': 1, 'class_definition': 1, 'class': 1, 'identifier': 20, 'argument_list': 7, '(': 8, 'attribute': 3, '.': 3, ')': 8, ':': 2, 'block': 2, 'function_definition': 1, 'def': 1, 'parameters': 1, 'expression_statement': 5, 'assignment': 3, '=': 3, 'call': 6, 'integer': 3, ',': 2}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 54, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 7, 'end_line': 12, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/scripts_question_utils_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 54, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 7, 'end_line': 12, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/scripts_question_utils_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.9216735987662608,0.92357668013966,"(tensor([0.9956]), tensor([0.9968]), tensor([0.9962]), tensor([0.9967]))",
"22         self.assertEqual(len(question_list), 11)
23         self.assertEqual(answers, 3)
24 
25     def test_case_2(self):
26         raw_list = open_test_case_file(2)
27         question_list = get_question_list(raw_list)
28         answers = get_answered_questions(question_list)
29 
30         self.assertEqual(len(question_list), 16)
31         self.assertEqual(answers, 11)
","22         self.assertEqual(len(question_list), 11)
23         self.assertEqual(len(answers), 3)
24 
25     def test_case_2(self):
26         raw_list = open_test_case_file(2)
27         question_list = get_question_list(raw_list)
28         answers = get_answered_questions(question_list)
29 
30         self.assertEqual(len(question_list), 16)
31         self.assertEqual(len(answers), 11)
","Before: 31
After: 31",fix typo in tests/scripts_question_utils_unittest.py,Fix unittest,https://github.com/bregman-arie/devops-exercises,tests/scripts_question_utils_unittest.py,a64decee570c4927f77acc2c2bcd45f7310970f7,cc848b135db53031a9250f3d56a4fd6bf5a3189a,0,285,"{'module': 1, 'expression_statement': 6, 'call': 8, 'attribute': 3, 'identifier': 21, '.': 3, 'argument_list': 8, '(': 9, ')': 9, ',': 3, 'integer': 4, 'function_definition': 1, 'def': 1, 'parameters': 1, ':': 1, 'block': 1, 'assignment': 3, '=': 3}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 54, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 7, 'end_line': 12, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/scripts_question_utils_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 5, 'token_count': 54, 'name': 'open_test_case_file', 'long_name': 'open_test_case_file( n : int )', 'start_line': 7, 'end_line': 12, 'full_parameters': ['n : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/scripts_question_utils_unittest.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.851845267255703,0.8754437749638887,"(tensor([0.9902]), tensor([0.9925]), tensor([0.9914]), tensor([0.9923]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 6, 7
After: 6, 7, 8",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,48,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 10
After: 11, 12, 13",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,74,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 12
After: 15",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,89,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 15
After: 18",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,125,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",TOOL
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 17
After: 20",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,132,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 22
After: 25",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,188,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",TOOL
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 25
After: 28",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,200,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 30
After: 33",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,286,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 32
After: 35",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,296,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 36
After: 39",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,329,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 39
After: 42",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,351,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 42
After: 45",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,394,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"2 import optparse
3 
4 
5 def main():
6     """""" Reads through README.md for question/answer pairs and adds them to a list to randomly select from and quiz yourself. 
7         - supports skipping quesitons with no documented answer with the -s flag
8     """"""
9     parser = optparse.OptionParser()
10     parser.add_option(""-s"", ""--skip"", action=""store_true"",help=""skips questions without an answer."", default=False)
11     options, args = parser.parse_args()
12     
13     with open('README.md', 'r') as f:
14         text = f.read()
15         
16     questions = []
17     
18     while True:
19         question_start = text.find('<summary>') + 9
20         question_end = text.find('</summary>')
21         answer_end = text.find('</b></details>')
22         
23         if answer_end == -1:
24             break
25         
26         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
27         answer = text[question_end + 17: answer_end]
28         questions.append((question, answer))
29         text = text[answer_end + 1:]
30         
31     num_questions = len(questions)
32     
33     while True:
34         try:
35             question, answer = questions[random.randint(0, num_questions)]
36             
37             if options.skip and not answer.strip():
38                 continue
39             
40             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
41                 print('A: ', answer)
42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
","2 import optparse
3 
4 
5 def main():
6     """"""Reads through README.md for question/answer pairs and adds them to a
7     list to randomly select from and quiz yourself.
8     Supports skipping quesitons with no documented answer with the -s flag
9     """"""
10     parser = optparse.OptionParser()
11     parser.add_option(""-s"", ""--skip"", action=""store_true"",
12                       help=""skips questions without an answer."",
13                       default=False)
14     options, args = parser.parse_args()
15 
16     with open('README.md', 'r') as f:
17         text = f.read()
18 
19     questions = []
20 
21     while True:
22         question_start = text.find('<summary>') + 9
23         question_end = text.find('</summary>')
24         answer_end = text.find('</b></details>')
25 
26         if answer_end == -1:
27             break
28 
29         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
30         answer = text[question_end + 17: answer_end]
31         questions.append((question, answer))
32         text = text[answer_end + 1:]
33 
34     num_questions = len(questions)
35 
36     while True:
37         try:
38             question, answer = questions[random.randint(0, num_questions)]
39 
40             if options.skip and not answer.strip():
41                 continue
42 
43             if input(f'Q: {question} ...Show answer? ""y"" for yes: ').lower() == 'y':
44                 print('A: ', answer)
45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
","Before: 45
After: 48",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,399,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 67, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 20, ')': 20, ':': 12, 'block': 9, 'expression_statement': 17, 'string': 18, 'string_start': 18, 'string_content': 17, 'string_end': 18, 'assignment': 12, '=': 15, 'call': 18, 'attribute': 14, '.': 14, 'argument_list': 18, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 3, 'if': 3, 'comparison_operator': 2, '==': 2, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'interpolation': 1, '{': 1, '}': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.7621991978888367,0.7608060567898941,"(tensor([0.9672]), tensor([0.9677]), tensor([0.9674]), tensor([0.9676]))",
"42         
43         except KeyboardInterrupt:
44             break
45         
46     print(""\nGoodbye! See you next time."")
47                 
48 
49 if __name__ == '__main__':
50     main()
","45 
46         except KeyboardInterrupt:
47             break
48 
49     print(""\nGoodbye! See you next time."")
50 
51 
52 if __name__ == '__main__':
53     main()
","Before: 47
After: 50",fix typos in random_question.py,Add a couple of questions on containers,https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,51ecb4ff7785dcea69db8866bcf0adcf021d13c8,aa420a7eed626e2559db8fb84a18f41b2ad9ec70,0,410,"{'module': 1, 'ERROR': 1, 'identifier': 5, 'expression_statement': 2, 'assignment': 1, ':': 2, 'type': 1, 'call': 1, 'argument_list': 1, '(': 1, 'string': 2, 'string_start': 2, 'string_content': 2, 'escape_sequence': 1, 'string_end': 2, ')': 1, 'if_statement': 1, 'if': 1, 'comparison_operator': 1, '==': 1, 'block': 1}","{'cyclomatic_complexity': 8, 'nloc': 28, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 46, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 8, 'nloc': 30, 'token_count': 215, 'name': 'main', 'long_name': 'main( )', 'start_line': 5, 'end_line': 49, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5856596027429395,0.5766839665572608,"(tensor([0.9470]), tensor([0.9461]), tensor([0.9466]), tensor([0.9462]))",TOOL
"4 from typing import List
5 
6 
7 def binary_search(arr: List[int], lb: int, ub: int, target: int) -> int:
8     """"""
9     A Binary Search Example which has O(log n) time complexity.
10     """"""
11     if lb <= ub:
12         mid: int = ub + lb // 2
13         if arr[mid] == target:
14             return mid
15         elif arr[mid] < target:
16             return binary_search(arr, mid + 1, ub, target)
17         else:
18             return binary_search(arr, lb, mid - 1, target)
19     else:
20         return -1
21 
22 
","4 from typing import List
5 
6 
7 def binary_search(arr: List[int], lb: int, ub: int, target: int) -> int:
8     """"""
9     A Binary Search Example which has O(log n) time complexity.
10     """"""
11     if lb <= ub:
12         mid: int = lb + (ub -lb)// 2
13         if arr[mid] == target:
14             return mid
15         elif arr[mid] < target:
16             return binary_search(arr, mid + 1, ub, target)
17         else:
18             return binary_search(arr, lb, mid - 1, target)
19     else:
20         return -1
21 
22 
","Before: 12
After: 12",fix binary_search bug,"To avoid overflow, so change the mid value (#237)",https://github.com/bregman-arie/devops-exercises,coding/python/binary_search.py,1ae937068c3b1bf0be969d74fdd02a635d5b3293,7c16c2b94ef8adc34c4a61f2c3dd21562c7553bf,0,81,"{'module': 1, 'import_from_statement': 1, 'from': 1, 'dotted_name': 2, 'identifier': 36, 'import': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, 'typed_parameter': 4, ':': 11, 'type': 7, 'generic_type': 1, 'type_parameter': 1, '[': 3, ']': 3, ',': 9, ')': 3, '->': 1, 'block': 6, 'expression_statement': 2, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 3, '<=': 1, 'assignment': 1, '=': 1, 'binary_operator': 4, '+': 2, '//': 1, 'integer': 4, 'subscript': 2, '==': 1, 'return_statement': 4, 'return': 4, 'elif_clause': 1, 'elif': 1, '<': 1, 'call': 2, 'argument_list': 2, 'else_clause': 2, 'else': 2, '-': 2, 'unary_operator': 1}","{'cyclomatic_complexity': 4, 'nloc': 14, 'token_count': 89, 'name': 'binary_search', 'long_name': 'binary_search( arr : List [ int ] , lb : int , ub : int , target : int )', 'start_line': 7, 'end_line': 20, 'full_parameters': ['arr : List [ int ]', ' lb : int', ' ub : int', ' target : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/coding/python/binary_search.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 14, 'token_count': 93, 'name': 'binary_search', 'long_name': 'binary_search( arr : List [ int ] , lb : int , ub : int , target : int )', 'start_line': 7, 'end_line': 20, 'full_parameters': ['arr : List [ int ]', ' lb : int', ' ub : int', ' target : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/coding/python/binary_search.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.9498992615632158,0.9520553744983192,"(tensor([0.9884]), tensor([0.9926]), tensor([0.9905]), tensor([0.9922]))",
"4 from typing import List
5 
6 
7 def binary_search(arr: List[int], lb: int, ub: int, target: int) -> int:
8     """"""
9     A Binary Search Example which has O(log n) time complexity.
10     """"""
11     if lb <= ub:
12         mid: int = lb + (ub -lb)// 2
13         if arr[mid] == target:
14             return mid
15         elif arr[mid] < target:
16             return binary_search(arr, mid + 1, ub, target)
17         else:
18             return binary_search(arr, lb, mid - 1, target)
19     else:
20         return -1
21 
22 
","4 from typing import List
5 
6 
7 def binary_search(arr: List[int], lb: int, ub: int, target: int) -> int:
8     """"""
9     A Binary Search Example which has O(log n) time complexity.
10     """"""
11     if lb <= ub:
12         mid: int = lb + (ub - lb) // 2
13         if arr[mid] == target:
14             return mid
15         elif arr[mid] < target:
16             return binary_search(arr, mid + 1, ub, target)
17         else:
18             return binary_search(arr, lb, mid - 1, target)
19     else:
20         return -1
21 
22 
","Before: 12
After: 12",fix typo in binary_search.py,Fixed CI/CD workflow for issue #182 / #232 (#254),https://github.com/bregman-arie/devops-exercises,coding/python/binary_search.py,84640e8eee2c9861cf7299224139b2fd0cf4bca3,080c5386149eb214d988ad6f9018088a30c3f31f,0,87,"{'module': 1, 'import_from_statement': 1, 'from': 1, 'dotted_name': 2, 'identifier': 37, 'import': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 4, 'typed_parameter': 4, ':': 11, 'type': 7, 'generic_type': 1, 'type_parameter': 1, '[': 3, ']': 3, ',': 9, ')': 4, '->': 1, 'block': 6, 'expression_statement': 2, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 3, '<=': 1, 'assignment': 1, '=': 1, 'binary_operator': 5, '+': 2, 'parenthesized_expression': 1, '-': 3, '//': 1, 'integer': 4, 'subscript': 2, '==': 1, 'return_statement': 4, 'return': 4, 'elif_clause': 1, 'elif': 1, '<': 1, 'call': 2, 'argument_list': 2, 'else_clause': 2, 'else': 2, 'unary_operator': 1}","{'cyclomatic_complexity': 4, 'nloc': 14, 'token_count': 93, 'name': 'binary_search', 'long_name': 'binary_search( arr : List [ int ] , lb : int , ub : int , target : int )', 'start_line': 7, 'end_line': 20, 'full_parameters': ['arr : List [ int ]', ' lb : int', ' ub : int', ' target : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/coding/python/binary_search.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 14, 'token_count': 93, 'name': 'binary_search', 'long_name': 'binary_search( arr : List [ int ] , lb : int , ub : int , target : int )', 'start_line': 7, 'end_line': 20, 'full_parameters': ['arr : List [ int ]', ' lb : int', ' ub : int', ' target : int'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/coding/python/binary_search.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.9742539268741272,0.9746258505635024,"(tensor([0.9969]), tensor([0.9969]), tensor([0.9969]), tensor([0.9969]))",
"1 import pulumi
2 import pulumi_aws as aws
3 
4 # Private Bucket
5 private_bucket = aws.s3.Bucket(""my-first-private-bucket"",
","1 import pulumi_aws as aws
2 
3 # Private Bucket
4 private_bucket = aws.s3.Bucket(""my-first-private-bucket"",
5                                acl=""private"",
6                                tags={
7                                    ""Environment"": ""Exercise"",
8                                    ""Name"": ""My First Private Bucket""},
9                                region=""eu-west-2""
","Before: 1, 6, 7, 8, 9, 10, 11
After: 5, 6, 7, 8, 9, 10",fix coding style in new_bucket/pulumi/__main__.py,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/s3/new_bucket/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,6,"{'module': 1, 'import_statement': 2, 'import': 2, 'dotted_name': 2, 'identifier': 3, 'aliased_import': 1, 'as': 1, 'comment': 1}",{},{},0.2035086443572585,0.2048060519556039,"(tensor([0.8111]), tensor([0.9225]), tensor([0.8632]), tensor([0.9100]))",
"9         ""Name"": ""My First Private Bucket""},
10     region=""eu-west-2""
11     )
12 
13 # Bucket Object
14 
15 aws.s3.BucketObject(""bucketObject"",
16     key=""some_object_key"",
17     bucket=private_bucket.id,
18     content=""object content"")
","9                                region=""eu-west-2""
10                                )
11 
12 # Bucket Object
13 aws.s3.BucketObject(""bucketObject"",
14                     key=""some_object_key"",
15                     bucket=private_bucket.id,
16                     content=""object content"")
17 
18 # Public Bucket
","Before: 14, 16, 17, 18
After: 14, 15, 16",fix coding style in new_bucket/pulumi/__main__.py,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/s3/new_bucket/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,78,"{'module': 1, 'ERROR': 4, 'string': 5, 'string_start': 5, 'string_content': 5, 'string_end': 5, ':': 1, 'expression_statement': 2, '}': 1, ',': 4, 'assignment': 1, 'identifier': 8, '=': 3, ')': 1, 'comment': 1, 'attribute': 3, '.': 3, '(': 1, 'keyword_argument': 2}",{},{},0.369487389749457,0.3651311779501463,"(tensor([0.9266]), tensor([0.9109]), tensor([0.9187]), tensor([0.9124]))",
"17     bucket=private_bucket.id,
18     content=""object content"")
19 
20 # Public Bucket
21 aws.s3.Bucket(""my-first-public-bucket"",
22     acl=""private"",
23     tags={
24         ""Environment"": ""Exercise"",
25         ""Name"": ""My First Public Bucket""},
26     region=""eu-west-1"",
","15                     bucket=private_bucket.id,
16                     content=""object content"")
17 
18 # Public Bucket
19 aws.s3.Bucket(""my-first-public-bucket"",
20               acl=""private"",
21               tags={
22                   ""Environment"": ""Exercise"",
23                   ""Name"": ""My First Public Bucket""},
24               region=""eu-west-1"",
","Before: 22, 23, 24, 25, 26, 27, 28
After: 20, 21, 22, 23, 24, 25",fix coding style in new_bucket/pulumi/__main__.py,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/s3/new_bucket/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,141,"{'module': 1, 'expression_statement': 1, 'assignment': 1, 'identifier': 9, '=': 4, 'expression_list': 1, 'attribute': 3, '.': 3, ',': 5, 'ERROR': 2, 'string': 7, 'string_start': 7, 'string_content': 7, 'string_end': 7, ')': 1, 'comment': 1, '(': 1, 'keyword_argument': 2, 'dictionary': 1, '{': 1, 'pair': 2, ':': 2, '}': 1}",{},{},0.6366771464618071,0.6174670318722439,"(tensor([0.9494]), tensor([0.9474]), tensor([0.9484]), tensor([0.9476]))",
"1 import pulumi
2 import pulumi_aws as aws
3 
4 availableZones = pulumi_aws.get_availability_zones(state=""available"")
5 
","1 import pulumi_aws as aws
2 
3 availableZones = aws.get_availability_zones(state=""available"")
4 
5 aws.ec2.Subnet(""NewSubnet1"",
6                vpc_id=aws.vpc[""main""][""id""],
7                cidr_block=""10.0.0.0/24"",
","Before: 1, 4
After: 3",remove pulumi_aws dependency,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/subnets/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,6,"{'module': 1, 'import_statement': 2, 'import': 2, 'dotted_name': 2, 'identifier': 7, 'aliased_import': 1, 'as': 1, 'expression_statement': 1, 'assignment': 1, '=': 2, 'call': 1, 'attribute': 1, '.': 1, 'argument_list': 1, '(': 1, 'keyword_argument': 1, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, ')': 1}",{},{},0.192652496964531,0.1886671774988738,"(tensor([0.7695]), tensor([0.8997]), tensor([0.8295]), tensor([0.8847]))",
"2 import pulumi_aws as aws
3 
4 availableZones = pulumi_aws.get_availability_zones(state=""available"")
5 
6 aws.ec2.Subnet(""NewSubnet1"",
7     vpc_id=aws_vpc[""main""][""id""],
8     cidr_block=""10.0.0.0/24"",
9     availability_zone=availableZones.names[0],
10     tags={""Name"": ""NewSubnet1""}
11     )
","1 import pulumi_aws as aws
2 
3 availableZones = aws.get_availability_zones(state=""available"")
4 
5 aws.ec2.Subnet(""NewSubnet1"",
6                vpc_id=aws.vpc[""main""][""id""],
7                cidr_block=""10.0.0.0/24"",
8                availability_zone=availableZones.names[0],
9                tags={""Name"": ""NewSubnet1""}
10                )
","Before: 7, 8, 9, 10, 11
After: 6, 7, 8, 9, 10",remove pulumi_aws dependency,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/subnets/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,65,"{'module': 1, 'import_statement': 1, 'import': 1, 'aliased_import': 1, 'dotted_name': 1, 'identifier': 16, 'as': 1, 'expression_statement': 1, 'assignment': 1, '=': 6, 'call': 1, 'attribute': 4, '.': 4, 'argument_list': 1, '(': 2, 'keyword_argument': 5, 'string': 7, 'string_start': 7, 'string_content': 7, 'string_end': 7, ')': 1, 'ERROR': 1, ',': 4, 'subscript': 3, '[': 3, ']': 3, 'integer': 1, 'dictionary': 1, '{': 1, 'pair': 1, ':': 1, '}': 1}",{},{},0.6386557069921793,0.6265839919345937,"(tensor([0.9581]), tensor([0.9568]), tensor([0.9575]), tensor([0.9569]))",
"9     availability_zone=availableZones.names[0],
10     tags={""Name"": ""NewSubnet1""}
11     )
12 
13 aws.ec2.Subnet(""NewSubnet2"",
14     vpc_id=aws_vpc[""main""][""id""],
15     cidr_block=""10.0.1.0/24"",
16     availability_zone=availableZones.names[1]
17     tags={""Name"": ""NewSubnet2""}
18     )
","8                availability_zone=availableZones.names[0],
9                tags={""Name"": ""NewSubnet1""}
10                )
11 
12 aws.ec2.Subnet(""NewSubnet2"",
13                vpc_id=aws.vpc[""main""][""id""],
14                cidr_block=""10.0.1.0/24"",
15                availability_zone=availableZones.names[1],
16                tags={""Name"": ""NewSubnet2""}
17                )
","Before: 14, 15, 16, 17, 18
After: 13, 14, 15, 16, 17",remove pulumi_aws dependency,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/subnets/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,137,"{'module': 1, 'expression_statement': 2, 'assignment': 2, 'identifier': 14, '=': 6, 'expression_list': 1, 'subscript': 4, 'attribute': 4, '.': 4, '[': 4, 'integer': 2, ']': 4, ',': 4, 'dictionary': 2, '{': 2, 'pair': 2, 'string': 8, 'string_start': 8, 'string_content': 8, 'string_end': 8, ':': 2, '}': 2, 'ERROR': 2, ')': 1, '(': 1, 'keyword_argument': 3}",{},{},0.6679542833357636,0.6642356546269564,"(tensor([0.9529]), tensor([0.9519]), tensor([0.9524]), tensor([0.9520]))",NONE
"16     availability_zone=availableZones.names[1]
17     tags={""Name"": ""NewSubnet2""}
18     )
19 
20 aws.ec2.Subnet(""NewSubnet3"",
21     vpc_id=aws_vpc[""main""][""id""],
22     cidr_block=""10.0.2.0/24"",
23     availability_zone=availableZones.names[2]
24     tags={""Name"": ""NewSubnet3""}
25     )
","15                availability_zone=availableZones.names[1],
16                tags={""Name"": ""NewSubnet2""}
17                )
18 
19 aws.ec2.Subnet(""NewSubnet3"",
20                vpc_id=aws.vpc[""main""][""id""],
21                cidr_block=""10.0.2.0/24"",
22                availability_zone=availableZones.names[2],
23                tags={""Name"": ""NewSubnet3""}
24                )
","Before: 21, 22, 23, 24, 25
After: 20, 21, 22, 23, 24",remove pulumi_aws dependency,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/subnets/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,208,"{'module': 1, 'expression_statement': 2, 'assignment': 2, 'identifier': 14, '=': 6, 'subscript': 4, 'attribute': 4, '.': 4, '[': 4, 'integer': 2, ']': 4, 'dictionary': 2, '{': 2, 'pair': 2, 'string': 8, 'string_start': 8, 'string_content': 8, 'string_end': 8, ':': 2, '}': 2, 'ERROR': 2, ')': 1, '(': 1, ',': 3, 'keyword_argument': 3}",{},{},0.6516143636100649,0.6489272368321432,"(tensor([0.9530]), tensor([0.9521]), tensor([0.9526]), tensor([0.9522]))",NONE
"22     cidr_block=""10.0.2.0/24"",
23     availability_zone=availableZones.names[2]
24     tags={""Name"": ""NewSubnet3""}
25     )
26 
27 # Run ""pulumi up""","21                cidr_block=""10.0.2.0/24"",
22                availability_zone=availableZones.names[2],
23                tags={""Name"": ""NewSubnet3""}
24                )
25 
26 # Run ""pulumi up""
","Before: 27
After: 26",remove pulumi_aws dependency,Update CKA,https://github.com/bregman-arie/devops-exercises,topics/aws/exercises/subnets/pulumi/__main__.py,9d018343c018057bc77553029707884e38357c99,e3c34aa9e4f7d6a28ea0ceb049214e9ab819fb59,0,247,"{'module': 1, 'expression_statement': 3, 'assignment': 3, 'identifier': 5, '=': 3, 'expression_list': 1, 'string': 3, 'string_start': 3, 'string_content': 3, 'string_end': 3, ',': 1, 'subscript': 1, 'attribute': 1, '.': 1, '[': 1, 'integer': 1, ']': 1, 'dictionary': 1, '{': 1, 'pair': 1, ':': 1, '}': 1, 'ERROR': 1, ')': 1}",{},{},0.6259035941086337,0.6255878797110437,"(tensor([0.9605]), tensor([0.9608]), tensor([0.9607]), tensor([0.9608]))",
"9 Usage:
10 $ python tests/syntax_lint.py
11 
12 """"""
13 
14 import pathlib
15 
16 p = pathlib.Path(__file__).parent.parent.joinpath('README.md')
17 
18 with open(p, 'rb') as f:
","9 Usage:
10 $ python tests/syntax_lint.py
11 
12 """"""
13 
14 import sys
15 
16 p = sys.argv[1]
17 
18 
","Before: 14
After: 14",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,11,"{'module': 1, 'expression_statement': 2, 'assignment': 2, 'identifier': 13, ':': 1, 'ERROR': 3, 'type': 1, 'binary_operator': 1, '/': 1, 'attribute': 5, '.': 5, 'string_start': 2, 'import_statement': 1, 'import': 1, 'dotted_name': 1, '=': 1, 'call': 2, 'argument_list': 2, '(': 2, ')': 2, 'string': 1, 'string_content': 1, 'string_end': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3638399233350959,0.3517887492836877,"(tensor([0.9164]), tensor([0.8239]), tensor([0.8677]), tensor([0.8323]))",
"11 
12 """"""
13 
14 import pathlib
15 
16 p = pathlib.Path(__file__).parent.parent.joinpath('README.md')
17 
18 with open(p, 'rb') as f:
19     file_list = [line.rstrip() for line in f.readlines()]
20 
","11 
12 """"""
13 
14 import sys
15 
16 p = sys.argv[1]
17 
18 
19 errors = []
20 
","Before: 16
After: 16",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,41,"{'module': 1, 'ERROR': 1, 'string_start': 3, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 17, 'expression_statement': 2, 'assignment': 2, '=': 2, 'call': 5, 'attribute': 6, '.': 6, 'argument_list': 5, '(': 5, ')': 5, 'string': 2, 'string_content': 2, 'string_end': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, ',': 1, 'as': 1, 'as_pattern_target': 1, ':': 1, 'block': 1, 'list_comprehension': 1, '[': 1, 'for_in_clause': 1, 'for': 1, 'in': 1, ']': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1635364718271402,0.1597666081340558,"(tensor([0.8411]), tensor([0.7072]), tensor([0.7684]), tensor([0.7187]))",
"21 errors = []
22 
23 
24 def count_details(file_list):
25     """"""
26     Counts the total amount of <details> and </details>
27 
28     Used for debugging purpose, not meant to be used in actual tests
29     """"""
30     details_final_count = 0
31     details_count = 0
32 
33     for line_number, line in enumerate(file_list):
34         if b'<details>' in line:
35             details_count += 1
36         if b'</details>' in line:
37             details_final_count += 1
38 
39     return details_count == details_final_count
40 
41 
","19 errors = []
20 
21 
22 def count_details(file_list):
23     """"""
24     Counts the total amount of <details> and </details>
25 
26     Used for debugging purpose, not meant to be used in actual tests
27     """"""
28     details_final_count = 0
29     details_count = 0
30 
31     for line_number, line in enumerate(file_list):
32         if b""<details>"" in line:
33             details_count += 1
34         if b""</details>"" in line:
35             details_final_count += 1
36 
37     return details_count == details_final_count
38 
39 
","Before: 34
After: 32",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,146,"{'module': 1, 'expression_statement': 6, 'assignment': 3, 'identifier': 15, '=': 3, 'list': 1, '[': 1, ']': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 2, ')': 2, ':': 4, 'block': 4, 'string': 3, 'string_start': 3, 'string_content': 3, 'string_end': 3, 'integer': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 3, 'call': 1, 'argument_list': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 3, 'augmented_assignment': 2, '+=': 2, 'return_statement': 1, 'return': 1, '==': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5439595889321946,0.547804065489918,"(tensor([0.9721]), tensor([0.9720]), tensor([0.9720]), tensor([0.9720]))",
"21 errors = []
22 
23 
24 def count_details(file_list):
25     """"""
26     Counts the total amount of <details> and </details>
27 
28     Used for debugging purpose, not meant to be used in actual tests
29     """"""
30     details_final_count = 0
31     details_count = 0
32 
33     for line_number, line in enumerate(file_list):
34         if b'<details>' in line:
35             details_count += 1
36         if b'</details>' in line:
37             details_final_count += 1
38 
39     return details_count == details_final_count
40 
41 
","19 errors = []
20 
21 
22 def count_details(file_list):
23     """"""
24     Counts the total amount of <details> and </details>
25 
26     Used for debugging purpose, not meant to be used in actual tests
27     """"""
28     details_final_count = 0
29     details_count = 0
30 
31     for line_number, line in enumerate(file_list):
32         if b""<details>"" in line:
33             details_count += 1
34         if b""</details>"" in line:
35             details_final_count += 1
36 
37     return details_count == details_final_count
38 
39 
","Before: 36
After: 34",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,162,"{'module': 1, 'expression_statement': 6, 'assignment': 3, 'identifier': 15, '=': 3, 'list': 1, '[': 1, ']': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 2, ')': 2, ':': 4, 'block': 4, 'string': 3, 'string_start': 3, 'string_content': 3, 'string_end': 3, 'integer': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 3, 'call': 1, 'argument_list': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 3, 'augmented_assignment': 2, '+=': 2, 'return_statement': 1, 'return': 1, '==': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5439595889321946,0.547804065489918,"(tensor([0.9721]), tensor([0.9720]), tensor([0.9720]), tensor([0.9720]))",NONE
"39     return details_count == details_final_count
40 
41 
42 def count_summary(file_list):
43     """"""
44     Counts the total amount of <details> and </details>
45 
46     Used for debugging purpose, not meant to be used in actual tests
47     """"""
48     details_final_count = 0
49     details_count = 0
50 
51     for line_number, line in enumerate(file_list):
52         if b'<summary>' in line:
53             details_count += 1
54         if b'</summary>' in line:
55             details_final_count += 1
56 
57     return details_count == details_final_count
58 
59 
","37     return details_count == details_final_count
38 
39 
40 def count_summary(file_list):
41     """"""
42     Counts the total amount of <details> and </details>
43 
44     Used for debugging purpose, not meant to be used in actual tests
45     """"""
46     details_final_count = 0
47     details_count = 0
48 
49     for line_number, line in enumerate(file_list):
50         if b""<summary>"" in line:
51             details_count += 1
52         if b""</summary>"" in line:
53             details_final_count += 1
54 
55     return details_count == details_final_count
56 
57 
","Before: 52
After: 50",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,223,"{'module': 1, 'return_statement': 2, 'return': 2, 'comparison_operator': 4, 'identifier': 16, '==': 2, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 2, ')': 2, ':': 4, 'block': 4, 'expression_statement': 5, 'string': 3, 'string_start': 3, 'string_content': 3, 'string_end': 3, 'assignment': 2, '=': 2, 'integer': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 3, 'call': 1, 'argument_list': 1, 'if_statement': 2, 'if': 2, 'augmented_assignment': 2, '+=': 2}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5439595889321946,0.5477456797640168,"(tensor([0.9753]), tensor([0.9762]), tensor([0.9758]), tensor([0.9761]))",
"39     return details_count == details_final_count
40 
41 
42 def count_summary(file_list):
43     """"""
44     Counts the total amount of <details> and </details>
45 
46     Used for debugging purpose, not meant to be used in actual tests
47     """"""
48     details_final_count = 0
49     details_count = 0
50 
51     for line_number, line in enumerate(file_list):
52         if b'<summary>' in line:
53             details_count += 1
54         if b'</summary>' in line:
55             details_final_count += 1
56 
57     return details_count == details_final_count
58 
59 
","37     return details_count == details_final_count
38 
39 
40 def count_summary(file_list):
41     """"""
42     Counts the total amount of <details> and </details>
43 
44     Used for debugging purpose, not meant to be used in actual tests
45     """"""
46     details_final_count = 0
47     details_count = 0
48 
49     for line_number, line in enumerate(file_list):
50         if b""<summary>"" in line:
51             details_count += 1
52         if b""</summary>"" in line:
53             details_final_count += 1
54 
55     return details_count == details_final_count
56 
57 
","Before: 54
After: 52",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,239,"{'module': 1, 'return_statement': 2, 'return': 2, 'comparison_operator': 4, 'identifier': 16, '==': 2, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 2, ')': 2, ':': 4, 'block': 4, 'expression_statement': 5, 'string': 3, 'string_start': 3, 'string_content': 3, 'string_end': 3, 'assignment': 2, '=': 2, 'integer': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 3, 'call': 1, 'argument_list': 1, 'if_statement': 2, 'if': 2, 'augmented_assignment': 2, '+=': 2}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5439595889321946,0.5477456797640168,"(tensor([0.9753]), tensor([0.9762]), tensor([0.9758]), tensor([0.9761]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 73
After: 71",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,281,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 75
After: 73",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,316,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 78, 79
After: 76, 77",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,336,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 81, 82
After: 79, 80",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,372,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 85
After: 83",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,403,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"57     return details_count == details_final_count
58 
59 
60 def check_details_tag(file_list):
61     """"""
62     Check whether the structure:
63     <details>
64     ...
65     </details>
66 
67     Is correctly followed, if not generates an error.
68 
69     """"""
70 
71     after_detail = False
72     error = False
73     err_message = ''
74     for line_number, line in enumerate(file_list):
75         if b'<details>' in line and b'</details>' in line:
76             pass
77         else:
78             if b'<details>' in line and after_detail:
79                 err_message = f'Missing closing detail tag round line {line_number - 1}'
80                 error = True
81             if b'</details>' in line and not after_detail:
82                 err_message = f'Missing opening detail tag round line {line_number - 1}'
83                 error = True
84 
85             if b'<details>' in line:
86                 after_detail = True
87 
88             if b'</details>' in line and after_detail:
89                 after_detail = False
90 
91             if error:
92                 errors.append(err_message)
93 
94         error = False
95 
96 
","55     return details_count == details_final_count
56 
57 
58 def check_details_tag(file_list):
59     """"""
60     Check whether the structure:
61     <details>
62     ...
63     </details>
64 
65     Is correctly followed, if not generates an error.
66 
67     """"""
68 
69     after_detail = False
70     error = False
71     err_message = """"
72     for line_number, line in enumerate(file_list):
73         if b""<details>"" in line and b""</details>"" in line:
74             pass
75         else:
76             if b""<details>"" in line and after_detail:
77                 err_message = f""Missing closing detail tag round line {line_number - 1}""
78                 error = True
79             if b""</details>"" in line and not after_detail:
80                 err_message = f""Missing opening detail tag round line {line_number - 1}""
81                 error = True
82 
83             if b""<details>"" in line:
84                 after_detail = True
85 
86             if b""</details>"" in line and after_detail:
87                 after_detail = False
88 
89             if error:
90                 errors.append(err_message)
91 
92         error = False
93 
94 
","Before: 88
After: 86",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,422,"{'module': 1, 'return_statement': 1, 'return': 1, 'comparison_operator': 7, 'identifier': 33, '==': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'expression_statement': 12, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'assignment': 10, '=': 10, 'false': 4, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, 'binary_operator': 2, '-': 2, 'integer': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4311846979917885,0.4381866039743048,"(tensor([0.9760]), tensor([0.9749]), tensor([0.9754]), tensor([0.9750]))",
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 110, 111, 112, 113
After: 108, 109, 110, 111, 112, 113, 114, 115",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,478,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",NONE
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 115, 116
After: 117, 118",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,533,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 118, 119
After: 120, 121",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,566,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",NONE
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 122
After: 124",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,594,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 125
After: 127",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,613,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",
"94         error = False
95 
96 
97 def check_summary_tag(file_list):
98     """"""
99     Check whether the structure:
100     <summary>
101     ...
102     </summary>
103 
104     Is correctly followed, if not generates an error.
105 
106     """"""
107 
108     after_summary = False
109     error = False
110     err_message = ''
111     for line_number, line in enumerate(file_list):
112         if b'<summary>' in line and b'</summary>' in line:
113             pass
114         else:
115             if b'<summary>' in line and after_summary:
116                 err_message = f'Missing closing summary tag around line {line_number}'
117                 error = True
118             if b'</summary>' in line and not after_summary:
119                 err_message = f'Missing opening summary tag around line {line_number}'
120                 error = True
121 
122             if b'<summary>' in line:
123                 after_summary = True
124 
125             if b'</summary>' in line and after_summary:
126                 after_summary = False
127 
128             if error:
129                 errors.append(err_message)
130 
131         error = False
132 
133 
","92         error = False
93 
94 
95 def check_summary_tag(file_list):
96     """"""
97     Check whether the structure:
98     <summary>
99     ...
100     </summary>
101 
102     Is correctly followed, if not generates an error.
103 
104     """"""
105 
106     after_summary = False
107     error = False
108     err_message = """"
109     for idx, line in enumerate(file_list):
110         line_number = idx + 1
111         if b""<summary>"" in line and b""</summary>"" in line:
112             if after_summary:
113                 err_message = f""Missing closing summary tag around line {line_number}""
114                 error = True
115 
116         else:
117             if b""<summary>"" in line and after_summary:
118                 err_message = f""Missing closing summary tag around line {line_number}""
119                 error = True
120             if b""</summary>"" in line and not after_summary:
121                 err_message = f""Missing opening summary tag around line {line_number}""
122                 error = True
123 
124             if b""<summary>"" in line:
125                 after_summary = True
126 
127             if b""</summary>"" in line and after_summary:
128                 after_summary = False
129 
130         if error:
131             errors.append(err_message)
132 
133         error = False
134 
135 
","Before: 128, 129
After: 130, 131",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,623,"{'module': 1, 'expression_statement': 13, 'assignment': 11, 'identifier': 32, '=': 11, 'false': 5, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 3, ')': 3, ':': 9, 'block': 9, 'string': 10, 'string_start': 10, 'string_content': 9, 'string_end': 10, 'for_statement': 1, 'for': 1, 'pattern_list': 1, ',': 1, 'in': 7, 'call': 2, 'argument_list': 2, 'if_statement': 6, 'if': 6, 'boolean_operator': 4, 'comparison_operator': 6, 'and': 4, 'pass_statement': 1, 'pass': 1, 'else_clause': 1, 'else': 1, 'interpolation': 2, '{': 2, '}': 2, 'true': 3, 'not_operator': 1, 'not': 1, 'attribute': 1, '.': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3601473146403399,0.3647742298286476,"(tensor([0.9493]), tensor([0.9603]), tensor([0.9548]), tensor([0.9592]))",NONE
"129                 errors.append(err_message)
130 
131         error = False
132 
133 
134 if __name__ == '__main__':
135     check_details_tag(file_list)
136     check_summary_tag(file_list)
137     if errors:
138         for error in errors:
","133         error = False
134 
135 
136 def check_md_file(file_name):
137     with open(p, ""rb"") as f:
138         file_list = [line.rstrip() for line in f.readlines()]
139     check_details_tag(file_list)
140     check_summary_tag(file_list)
141 
142 
","Before: 134
After: 136, 137, 138, 141, 142, 143, 144, 145, 147",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,649,"{'module': 1, 'expression_statement': 4, 'call': 3, 'attribute': 1, 'identifier': 10, '.': 1, 'argument_list': 3, '(': 3, ')': 3, 'assignment': 1, '=': 1, 'false': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 1, '==': 1, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, ':': 2, 'block': 2}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1336003775185041,0.0967288660068372,"(tensor([0.8245]), tensor([0.8417]), tensor([0.8330]), tensor([0.8400]))",
"134 if __name__ == '__main__':
135     check_details_tag(file_list)
136     check_summary_tag(file_list)
137     if errors:
138         for error in errors:
139             print(error)
140         exit(1)
141 
142     print(""Tests passed successfully."")
","144     print(f""..........Checking {p}.........."")
145     check_md_file(p)
146     if errors:
147         print(f""{p} failed"", file=sys.stderr)
148         for error in errors:
149             print(error, file=sys.stderr)
150         exit(1)
151 
152     print(""Tests passed successfully."")
","Before: 139
After: 149",update syntax_lint.py to use sys.argv[1],scripts/run_ci.sh to cover directories in the exercises and topics dir (#315),https://github.com/bregman-arie/devops-exercises,tests/syntax_lint.py,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,50c9714fe4da37271b3c066f3526a4bc8ec9b408,0,682,"{'module': 1, 'if_statement': 2, 'if': 2, 'comparison_operator': 1, 'identifier': 11, '==': 1, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, ':': 3, 'block': 3, 'expression_statement': 4, 'call': 4, 'argument_list': 4, '(': 4, ')': 4, 'for_statement': 1, 'for': 1, 'in': 1, 'integer': 1}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 24, 'end_line': 39, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 4, 'nloc': 9, 'token_count': 44, 'name': 'count_details', 'long_name': 'count_details( file_list )', 'start_line': 22, 'end_line': 37, 'full_parameters': ['file_list'], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/tests/syntax_lint.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.2597586532703011,0.216372148835884,"(tensor([0.8218]), tensor([0.8675]), tensor([0.8440]), tensor([0.8627]))",
"4 
5 import pathlib
6 from random import choice
7 from typing import List
8 
9 p = pathlib.Path(__file__).parent.parent.joinpath('README.md')
10 
11 
12 def get_file_list():
13     with open(p, 'rb') as f:
","5 import pathlib
6 from random import choice
7 from typing import List
8 import re
9 
10 p = pathlib.Path(__file__).parent.parent.joinpath(""README.md"")
11 
12 
13 def get_file_list():
14     file_list = """"
","Before: 9
After: 10",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,55,"{'module': 1, 'import_statement': 1, 'import': 3, 'dotted_name': 5, 'identifier': 13, 'import_from_statement': 2, 'from': 2, 'expression_statement': 1, 'assignment': 1, '=': 1, 'call': 2, 'attribute': 4, '.': 4, 'argument_list': 2, '(': 3, ')': 3, 'string': 1, 'string_start': 1, 'string_content': 1, 'string_end': 1, 'function_definition': 1, 'def': 1, 'parameters': 1, ':': 1, 'block': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.5190348892827303,0.5010861119664356,"(tensor([0.9550]), tensor([0.9271]), tensor([0.9409]), tensor([0.9298]))",
"9 p = pathlib.Path(__file__).parent.parent.joinpath('README.md')
10 
11 
12 def get_file_list():
13     with open(p, 'rb') as f:
14         file_list = [line.rstrip() for line in f.readlines()]
15     return file_list
16 
17 
","10 p = pathlib.Path(__file__).parent.parent.joinpath(""README.md"")
11 
12 
13 def get_file_list():
14     file_list = """"
15     with open(p, ""rb"") as f:
16         for line in f.readlines():
17             file_list += line.rstrip().decode()
18     return file_list
19 
20 
","Before: 13, 14
After: 14, 15, 16, 17",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,84,"{'module': 1, 'expression_statement': 2, 'assignment': 2, 'identifier': 18, '=': 2, 'call': 5, 'attribute': 6, '.': 6, 'argument_list': 5, '(': 6, ')': 6, 'string': 2, 'string_start': 2, 'string_content': 2, 'string_end': 2, 'function_definition': 1, 'def': 1, 'parameters': 1, ':': 2, 'block': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, ',': 1, 'as': 1, 'as_pattern_target': 1, 'list_comprehension': 1, '[': 1, 'for_in_clause': 1, 'for': 1, 'in': 1, ']': 1, 'return_statement': 1, 'return': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4195561028958611,0.423032871544377,"(tensor([0.9418]), tensor([0.9654]), tensor([0.9535]), tensor([0.9630]))",
"15     return file_list
16 
17 
18 def get_question_list(file_list: List[bytes]) -> list:
19 
20     questions_list = []
21     temp = []
22     after_summary_tag = False
23 
24     for line in file_list:
25         if line.startswith(b'<details>'):
26             temp.append(line)
27             after_summary_tag = True
28 
29         elif after_summary_tag and line != b'' and b'</details>' not in line:
30             temp.append(line)
31 
32         elif after_summary_tag and b'</details>' in line:
33             temp.append(line)
34             after_summary_tag = False
35 
36             questions_list.append(temp)
37             temp = []
38 
39     return questions_list
40 
41 
","18     return file_list
19 
20 
21 def get_question_list(file_list: List[str]) -> list:
22     file_list = re.findall(""<details>(.*?)</details>"", file_list)
23     questions_list = []
24     for i in file_list:
25         q = re.findall(r""<summary>(.*?)</summary>"", i)[0]
26         questions_list.append(q)
27     return questions_list
28 
29 
","Before: 18, 19
After: 21, 22",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,136,"{'module': 1, 'return_statement': 2, 'return': 2, 'identifier': 34, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 6, 'typed_parameter': 1, ':': 6, 'type': 3, 'generic_type': 1, 'type_parameter': 1, '[': 4, ']': 4, ')': 6, '->': 1, 'block': 5, 'expression_statement': 10, 'assignment': 6, '=': 6, 'list': 3, 'false': 2, 'for_statement': 1, 'for': 1, 'in': 2, 'if_statement': 1, 'if': 1, 'call': 5, 'attribute': 5, '.': 5, 'argument_list': 5, 'string': 4, 'string_start': 4, 'string_content': 3, 'string_end': 4, 'true': 1, 'elif_clause': 2, 'elif': 2, 'boolean_operator': 3, 'and': 3, 'comparison_operator': 3, '!=': 1, 'not in': 2}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1581674178884543,0.1489211221935709,"(tensor([0.8507]), tensor([0.7604]), tensor([0.8030]), tensor([0.7686]))",
"15     return file_list
16 
17 
18 def get_question_list(file_list: List[bytes]) -> list:
19 
20     questions_list = []
21     temp = []
22     after_summary_tag = False
23 
24     for line in file_list:
25         if line.startswith(b'<details>'):
26             temp.append(line)
27             after_summary_tag = True
28 
29         elif after_summary_tag and line != b'' and b'</details>' not in line:
30             temp.append(line)
31 
32         elif after_summary_tag and b'</details>' in line:
33             temp.append(line)
34             after_summary_tag = False
35 
36             questions_list.append(temp)
37             temp = []
38 
39     return questions_list
40 
41 
","18     return file_list
19 
20 
21 def get_question_list(file_list: List[str]) -> list:
22     file_list = re.findall(""<details>(.*?)</details>"", file_list)
23     questions_list = []
24     for i in file_list:
25         q = re.findall(r""<summary>(.*?)</summary>"", i)[0]
26         questions_list.append(q)
27     return questions_list
28 
29 
","Before: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38
After: 24, 25, 26",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,150,"{'module': 1, 'return_statement': 2, 'return': 2, 'identifier': 34, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 6, 'typed_parameter': 1, ':': 6, 'type': 3, 'generic_type': 1, 'type_parameter': 1, '[': 4, ']': 4, ')': 6, '->': 1, 'block': 5, 'expression_statement': 10, 'assignment': 6, '=': 6, 'list': 3, 'false': 2, 'for_statement': 1, 'for': 1, 'in': 2, 'if_statement': 1, 'if': 1, 'call': 5, 'attribute': 5, '.': 5, 'argument_list': 5, 'string': 4, 'string_start': 4, 'string_content': 3, 'string_end': 4, 'true': 1, 'elif_clause': 2, 'elif': 2, 'boolean_operator': 3, 'and': 3, 'comparison_operator': 3, '!=': 1, 'not in': 2}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1581674178884543,0.1489211221935709,"(tensor([0.8507]), tensor([0.7604]), tensor([0.8030]), tensor([0.7686]))",
"39     return questions_list
40 
41 
42 def get_answered_questions(question_list: List[List[bytes]]) -> list:
43     """"""Dont let the type hint confuse you, problem of not using classes.
44 
45      It takes the result of get_question_list(file_list)
46 
47      Returns a list of questions that are answered.
48      """"""
49 
50     t = []
51 
52     for q in question_list:
53 
54         index = 0
55 
56         for i in q:
57             if b'</summary>' in i:
58                 index = q.index(i)
59 
60         if q[index+1: len(q) - 1]:
61             t.append(q)
62 
63     return t
64 
65 
","27     return questions_list
28 
29 
30 def get_answered_questions(question_list: List[str]) -> list:
31     t = []
32     question_list = re.findall(""<details>(.*?)</details>"", question_list)
33     for i in question_list:
34         q = re.findall(r""<summary>(.*?)</summary>"", i)
35         if q and q[0] == """":
36             continue
37         a = re.findall(r""<b>(.*?)</b>"", i)
38         if a and a[0] == """":
39             continue
40         else:
41             t.append(q[0])
42     return t
43 
44 
","Before: 42, 43, 44, 45, 46, 47, 48, 49
After: 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,303,"{'module': 1, 'return_statement': 2, 'return': 2, 'identifier': 26, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 4, 'typed_parameter': 1, ':': 7, 'type': 4, 'generic_type': 2, 'type_parameter': 2, '[': 4, ']': 4, ')': 4, '->': 1, 'block': 5, 'expression_statement': 5, 'string': 2, 'string_start': 2, 'string_content': 2, 'string_end': 2, 'assignment': 3, '=': 3, 'list': 1, 'for_statement': 2, 'for': 2, 'in': 3, 'integer': 3, 'if_statement': 2, 'if': 2, 'comparison_operator': 1, 'call': 3, 'attribute': 2, '.': 2, 'argument_list': 3, 'subscript': 1, 'slice': 1, 'binary_operator': 2, '+': 1, '-': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1621025712568177,0.1551442598594679,"(tensor([0.8088]), tensor([0.7813]), tensor([0.7948]), tensor([0.7839]))",
"39     return questions_list
40 
41 
42 def get_answered_questions(question_list: List[List[bytes]]) -> list:
43     """"""Dont let the type hint confuse you, problem of not using classes.
44 
45      It takes the result of get_question_list(file_list)
46 
47      Returns a list of questions that are answered.
48      """"""
49 
50     t = []
51 
52     for q in question_list:
53 
54         index = 0
55 
56         for i in q:
57             if b'</summary>' in i:
58                 index = q.index(i)
59 
60         if q[index+1: len(q) - 1]:
61             t.append(q)
62 
63     return t
64 
65 
","42     return t
43 
44 
45 def get_answers_count() -> List:
46     """"""
47     Return [answer_questions,all_questions] ,PASS complete. FAIL incomplete.
48     >>> get_answers_count()
49     [463, 463]
50     """"""
51     ans_questions = get_answered_questions(get_file_list())
52     len_ans_questions = len(ans_questions)
53     all_questions = get_question_list(get_file_list())
54     len_all_questions = len(all_questions)
55     return [len_ans_questions, len_all_questions]
56 
57 
","Before: 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63
After: 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,322,"{'module': 1, 'return_statement': 2, 'return': 2, 'identifier': 26, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 4, 'typed_parameter': 1, ':': 7, 'type': 4, 'generic_type': 2, 'type_parameter': 2, '[': 4, ']': 4, ')': 4, '->': 1, 'block': 5, 'expression_statement': 5, 'string': 2, 'string_start': 2, 'string_content': 2, 'string_end': 2, 'assignment': 3, '=': 3, 'list': 1, 'for_statement': 2, 'for': 2, 'in': 3, 'integer': 3, 'if_statement': 2, 'if': 2, 'comparison_operator': 1, 'call': 3, 'attribute': 2, '.': 2, 'argument_list': 3, 'subscript': 1, 'slice': 1, 'binary_operator': 2, '+': 1, '-': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",1.6941708600204066e-78,1.6564479113111004e-78,"(tensor([0.7940]), tensor([0.7391]), tensor([0.7655]), tensor([0.7442]))",
"63     return t
64 
65 
66 def get_challenges_count() -> int:
67     challenges_path = pathlib.Path(__file__).parent.parent.joinpath('exercises').glob('*.md')
68     return len(list(challenges_path))
69 
70 
","55     return [len_ans_questions, len_all_questions]
56 
57 
58 def get_challenges_count() -> int:
59     challenges_path = (
60         pathlib.Path(__file__).parent.parent.joinpath(""exercises"").glob(""*.md"")
61     )
62     return len(list(challenges_path))
63 
64 
","Before: 67
After: 59, 60, 61",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,446,"{'module': 1, 'return_statement': 2, 'return': 2, 'identifier': 14, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 6, ')': 6, '->': 1, 'type': 1, ':': 1, 'block': 1, 'expression_statement': 1, 'assignment': 1, '=': 1, 'call': 5, 'attribute': 5, '.': 5, 'argument_list': 5, 'string': 2, 'string_start': 2, 'string_content': 2, 'string_end': 2}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.3930553065642568,0.351891797962638,"(tensor([0.9049]), tensor([0.9374]), tensor([0.9209]), tensor([0.9341]))",NONE
"69 
70 
71 # WIP WAITING FEEDBACK
72 def get_random_question(question_list: List[List[bytes]], with_answer=False):
73     if with_answer:
74         return choice(get_answered_questions(question_list))
75     return choice(question_list)
76 
77 
","63 
64 
65 # WIP WAITING FEEDBACK
66 def get_random_question(question_list: List[str], with_answer=False):
67     if with_answer:
68         return choice(get_answered_questions(question_list))
69     return choice(get_question_list(question_list))
70 
71 
","Before: 72
After: 66",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,490,"{'module': 1, 'comment': 1, 'function_definition': 1, 'def': 1, 'identifier': 12, 'parameters': 1, '(': 4, 'typed_parameter': 1, ':': 3, 'type': 3, 'generic_type': 2, 'type_parameter': 2, '[': 2, ']': 2, ',': 1, 'default_parameter': 1, '=': 1, 'false': 1, ')': 4, 'block': 2, 'if_statement': 1, 'if': 1, 'return_statement': 2, 'return': 2, 'call': 3, 'argument_list': 3}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4954455474965186,0.4583873443120965,"(tensor([0.9512]), tensor([0.9539]), tensor([0.9526]), tensor([0.9536]))",
"69 
70 
71 # WIP WAITING FEEDBACK
72 def get_random_question(question_list: List[List[bytes]], with_answer=False):
73     if with_answer:
74         return choice(get_answered_questions(question_list))
75     return choice(question_list)
76 
77 
","63 
64 
65 # WIP WAITING FEEDBACK
66 def get_random_question(question_list: List[str], with_answer=False):
67     if with_answer:
68         return choice(get_answered_questions(question_list))
69     return choice(get_question_list(question_list))
70 
71 
","Before: 75
After: 69",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,516,"{'module': 1, 'comment': 1, 'function_definition': 1, 'def': 1, 'identifier': 12, 'parameters': 1, '(': 4, 'typed_parameter': 1, ':': 3, 'type': 3, 'generic_type': 2, 'type_parameter': 2, '[': 2, ']': 2, ',': 1, 'default_parameter': 1, '=': 1, 'false': 1, ')': 4, 'block': 2, 'if_statement': 1, 'if': 1, 'return_statement': 2, 'return': 2, 'call': 3, 'argument_list': 3}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.4954455474965186,0.4583873443120965,"(tensor([0.9512]), tensor([0.9539]), tensor([0.9526]), tensor([0.9536]))",
"75     return choice(question_list)
76 
77 
78 """"""Use this question_list. Unless you have already opened/worked/need the file, then don't or
79 you will end up doing the same thing twice.
80 
81 eg:
82 
83 #my_dir/main.py
84 
","74 eg:
75 #my_dir/main.py
76 from scripts import question_utils
77 print(question_utils.get_answered_questions(question_utils.question_list)
78 >> 123
79  # noqa: E501
80 """"""
81 
82 if __name__ == ""__main__"":
83     import doctest
","Before: 80, 82, 84, 86, 88, 90
After: 79",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,555,"{'module': 1, 'return_statement': 1, 'return': 1, 'call': 1, 'identifier': 27, 'argument_list': 1, '(': 1, ')': 1, 'ERROR': 4, 'string_start': 2, 'attribute': 2, '.': 2, 'expression_statement': 1, 'binary_operator': 2, '/': 2, ',': 1, 'boolean_operator': 1, 'or': 1, ':': 1, 'comment': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",1.9199701331848463e-78,1.7610635012903502e-78,"(tensor([0.7638]), tensor([0.7325]), tensor([0.7478]), tensor([0.7355]))",NONE
"88 
89 >> 123
90 
91 """"""
92 
93 question_list = get_question_list(get_file_list())
","77 print(question_utils.get_answered_questions(question_utils.question_list)
78 >> 123
79  # noqa: E501
80 """"""
81 
82 if __name__ == ""__main__"":
83     import doctest
84 
85     doctest.testmod()
86     # print(get_question_list(get_file_list()))
","Before: 93
After: 82, 83, 84, 85, 86, 87, 88, 89",update question_utils.py to use re.findall,changing the function a bit (#314),https://github.com/bregman-arie/devops-exercises,scripts/question_utils.py,299a1fa9398f6f9a4e97ab08d0d32dce8ac8cea8,01e1dddd2f810a8aedae9fcf8fca7a70c10a673a,0,535,"{'module': 1, 'ERROR': 2, '>': 2, 'expression_statement': 1, 'integer': 1, 'string_start': 1}","{'cyclomatic_complexity': 2, 'nloc': 4, 'token_count': 33, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 12, 'end_line': 15, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 2, 'nloc': 6, 'token_count': 39, 'name': 'get_file_list', 'long_name': 'get_file_list( )', 'start_line': 13, 'end_line': 18, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/question_utils.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.1428389683834837,0.0,"(tensor([0.7301]), tensor([0.8581]), tensor([0.7889]), tensor([0.8433]))",
"3 import os
4 
5 
6 def main():
7     """"""Reads through README.md for question/answer pairs and adds them to a
8     list to randomly select from and quiz yourself.
9     Supports skipping quesitons with no documented answer with the -s flag
10     """"""
11     parser = optparse.OptionParser()
12     parser.add_option(""-s"", ""--skip"", action=""store_true"",
13                       help=""skips questions without an answer."",
14                       default=False)
15     options, args = parser.parse_args()
16 
17     with open('README.md', 'r') as f:
18         text = f.read()
19 
20     questions = []
21 
22     while True:
23         question_start = text.find('<summary>') + 9
24         question_end = text.find('</summary>')
25         answer_end = text.find('</b></details>')
26 
27         if answer_end == -1:
28             break
29 
30         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
31         answer = text[question_end + 17: answer_end]
32         questions.append((question, answer))
33         text = text[answer_end + 1:]
34 
35     num_questions = len(questions)
36 
37     while True:
38         try:
39             question, answer = questions[random.randint(0, num_questions)]
40 
41             if options.skip and not answer.strip():
42                 continue
43             os.system(""clear"")
44             print(question)
45             print(""...Press Enter to show answer..."")
46             input()
47             print('A: ', answer)
48             print(""... Press Enter to continue, Ctrl-C to exit"")
49             input()
50 
51         except KeyboardInterrupt:
52             break
53 
54     print(""\nGoodbye! See you next time."")
55 
56 
","3 import os
4 
5 
6 def main():
7     """"""Reads through README.md for question/answer pairs and adds them to a
8     list to randomly select from and quiz yourself.
9     Supports skipping questions with no documented answer with the -s flag
10     """"""
11     parser = optparse.OptionParser()
12     parser.add_option(""-s"", ""--skip"", action=""store_true"",
13                       help=""skips questions without an answer."",
14                       default=False)
15     options, args = parser.parse_args()
16 
17     with open('README.md', 'r') as f:
18         text = f.read()
19 
20     questions = []
21 
22     while True:
23         question_start = text.find('<summary>') + 9
24         question_end = text.find('</summary>')
25         answer_end = text.find('</b></details>')
26 
27         if answer_end == -1:
28             break
29 
30         question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')
31         answer = text[question_end + 17: answer_end]
32         questions.append((question, answer))
33         text = text[answer_end + 1:]
34 
35     num_questions = len(questions)
36 
37     while True:
38         try:
39             question, answer = questions[random.randint(0, num_questions)]
40 
41             if options.skip and not answer.strip():
42                 continue
43             os.system(""clear"")
44             print(question)
45             print(""...Press Enter to show answer..."")
46             input()
47             print('A: ', answer)
48             print(""... Press Enter to continue, Ctrl-C to exit"")
49             input()
50 
51         except KeyboardInterrupt:
52             break
53 
54     print(""\nGoodbye! See you next time."")
55 
56 
","Before: 9
After: 9",fix typo in random_question.py,Fix typos (#411),https://github.com/bregman-arie/devops-exercises,scripts/random_question.py,4b6718938cc8d6ee304c12022fdaaf5579400652,bf95e8f81e86c2c57f28cbc7ad6d2496ac78dc77,0,65,"{'module': 1, 'import_statement': 1, 'import': 1, 'dotted_name': 1, 'identifier': 72, 'function_definition': 1, 'def': 1, 'parameters': 1, '(': 24, ')': 24, ':': 11, 'block': 8, 'expression_statement': 23, 'string': 19, 'string_start': 19, 'string_content': 17, 'string_end': 19, 'assignment': 12, '=': 15, 'call': 22, 'attribute': 14, '.': 14, 'argument_list': 22, ',': 12, 'keyword_argument': 3, 'false': 1, 'pattern_list': 2, 'with_statement': 1, 'with': 1, 'with_clause': 1, 'with_item': 1, 'as_pattern': 1, 'as': 1, 'as_pattern_target': 1, 'list': 1, '[': 5, ']': 5, 'while_statement': 2, 'while': 2, 'true': 2, 'binary_operator': 3, '+': 3, 'integer': 5, 'if_statement': 2, 'if': 2, 'comparison_operator': 1, '==': 1, 'unary_operator': 1, '-': 1, 'break_statement': 2, 'break': 2, 'subscript': 4, 'slice': 3, 'tuple': 1, 'try_statement': 1, 'try': 1, 'boolean_operator': 1, 'and': 1, 'not_operator': 1, 'not': 1, 'continue_statement': 1, 'continue': 1, 'except_clause': 1, 'except': 1, 'escape_sequence': 1}","{'cyclomatic_complexity': 7, 'nloc': 35, 'token_count': 226, 'name': 'main', 'long_name': 'main( )', 'start_line': 6, 'end_line': 54, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/prev/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}","{'cyclomatic_complexity': 7, 'nloc': 35, 'token_count': 226, 'name': 'main', 'long_name': 'main( )', 'start_line': 6, 'end_line': 54, 'full_parameters': [], 'filename': '/home/set-iitgn-vm/.local/lib/python3.10/site-packages/Minecpp/devops-exercises/curr/scripts/random_question.py', 'top_nesting_level': 0, 'fan_in': 0, 'fan_out': 0, 'general_fan_out': 0}",0.9929921499221114,0.9925656880684284,"(tensor([0.9927]), tensor([0.9879]), tensor([0.9903]), tensor([0.9884]))",DEV
